.. ## Copyright (c) 2019-2022, Lawrence Livermore National Security, LLC and
.. ## other RADIUSS Project Developers. See the top-level COPYRIGHT file for details.
.. ##
.. ## SPDX-License-Identifier: (MIT)
.. ##

##########
RADIUSS CI
##########

Documenting the CI infrastructure developed for RADIUSS projects.

RADIUSS CI is a sub project form the RADIUSS initiative focusing on sharing
resource and documentation on Continuous Integration among RADIUSS projects.
We designed an automated infrastructure based on GitLab that we meant to be
universal enough to be shared among RADIUSS projects. This infrastructure
involves using Spack to setup the project dependencies and generate a
configuration file.

LLNL's RADIUSS project (Rapid Application Development via an Institutional
Universal Software Stack) aims to broaden usage across LLNL and the open source
community of a set of libraries and tools used for HPC scientific application
development.

=========================
Background and Motivation
=========================

Projects belonging to the RADIUSS scope are targeting the same machines and
use Spack as a packaging system. We want them to ensure they build with
similar toolchains.

We split the design in three actions necessary to adopt RADIUSS CI methodology.
Those actions will be documented in the User Guide.

1. **Use Spack to configure the project build.**
   Spack provides a common context to express *toolchains*, *machines
   setup* and *build sequence*. It is increasingly used to install the
   dependency tree of large simulation codes.
2. **Build and test without breaking your habits.**
   We do not require the adoption of Spack to build your code but we require
   that your build system accepts the configuration file generated by spack as
   an input (``CMakeCache.txt`` for CMake build system). That way, dependencies
   and options all already set coherently with the spec provided to build the
   dependency tree.
3. **Setup the CI using the shared template.**
   Once you have provided the effort to adopt the first two steps, you should
   be able to benefit from the shared CI infrastructure. In very complex
   scenario, you will always be able to use the template as a starting point
   for a custom implementation.

In the Developer Guide, will will explain the layout of the RADIUSS CI project
and how the different pieces work with one another.

.. toctree::
   :hidden: 2
   :caption: User Documentation

   sphinx/user_guide/index

.. toctree::
   :hidden: 2
   :caption: Developer Documentation

   sphinx/dev_guide/index




   uberenv
   ci
   spack-ci


.. ## Uberenv and CI Shared Documentation
.. ## ===================================
.. ## 
.. ## In RADIUSS, we designed a streamlined process to build your project with its
.. ## dependencies using Spack and Uberenv, and add a basic CI to test those builds
.. ## in Gitlab.
.. ## 
.. ## Before getting started, it is a good idea to read the `LC specific
.. ## documentation for Gitlab <https://gitlab.llnl.gov>`_. In particular, the
.. ## "Getting Started" and "Setup Mirroring" sub-pages *will help*.
.. ## 
.. ## The main steps are:
.. ## 
.. ## 1. Get Uberenv. See :ref:`env`.
.. ## 2. Setup CI. See :ref:`ci`.
.. ## 3. Create build_and_test script.
.. ## 
.. ## .. toctree::
.. ##    :maxdepth: 2
.. ##    :caption: Shared Documentation
.. ## 
.. ##    uberenv
.. ##    ci
.. ##    spack-ci
.. ## 
.. ## Indices and tables
.. ## ==================
.. ## 
.. ## * :ref:`genindex`
.. ## * :ref:`modindex`
.. ## * :ref:`search`
